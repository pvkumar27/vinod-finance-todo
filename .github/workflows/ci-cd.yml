name: CI/CD Pipeline

on:
  push:
    branches: [ main, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  ci_test:
    name: CI Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm test -- --watchAll=false
        env:
          REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
          REACT_APP_SITE_URL: ${{ secrets.REACT_APP_SITE_URL || 'http://localhost:3000' }}
      
      # Build the app
      - name: Build app
        run: |
          # Create .env file for build
          echo "REACT_APP_SUPABASE_URL=$REACT_APP_SUPABASE_URL" > .env
          echo "REACT_APP_SUPABASE_ANON_KEY=$REACT_APP_SUPABASE_ANON_KEY" >> .env
          echo "REACT_APP_SITE_URL=http://localhost:3000" >> .env
          echo "REACT_APP_FIREBASE_API_KEY=${REACT_APP_FIREBASE_API_KEY:-dummy-key}" >> .env
          
          # Build the app
          npm run build
        env:
          REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
          REACT_APP_SITE_URL: "http://localhost:3000"
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY || 'dummy-key' }}
      
      # Check build output
      - name: Check build output
        run: |
          if [ ! -f build/index.html ]; then
            echo "Build failed: index.html missing"
            exit 1
          fi
          echo "Build output contents:"
          ls -la build
          echo "Static files:"
          ls -la build/static || echo "No static directory found!"
          echo "Checking index.html content:"
          grep -q "<div id=\"root\"" build/index.html && echo "Root div found in index.html" || echo "WARNING: Root div not found in index.html"

  release:
    name: Release
    needs: ci_test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      # Set up git user for commits
      - name: Set up git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Determine version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Remove 'v' prefix for comparison
          CURRENT_VERSION_NUM=${CURRENT_VERSION#v}
          LATEST_TAG_NUM=${LATEST_TAG#v}
          
          # If current version is ahead of latest tag, use it
          if [ "$(printf '%s\n' "$LATEST_TAG_NUM" "$CURRENT_VERSION_NUM" | sort -V | tail -n1)" = "$CURRENT_VERSION_NUM" ]; then
            NEW_VERSION="v$CURRENT_VERSION_NUM"
          else
            # Increment patch version of latest tag
            MAJOR=$(echo $LATEST_TAG_NUM | cut -d. -f1)
            MINOR=$(echo $LATEST_TAG_NUM | cut -d. -f2)
            PATCH=$(echo $LATEST_TAG_NUM | cut -d. -f3)
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
          fi
          
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request for Release
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Release ${{ steps.version.outputs.version }}"
          title: "Release ${{ steps.version.outputs.version }}"
          body: |
            Automated release PR for version ${{ steps.version.outputs.version }}
            
            This PR was automatically created by the CI/CD pipeline.
          branch: release-${{ steps.version.outputs.version }}
          base: main
          delete-branch: true
      
      - name: Notify on success
        if: success()
        run: |
          echo "üéâ Release ${{ steps.version.outputs.version }} completed successfully!"
          echo "üåê Netlify will auto-deploy the new version"
      
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release failure: ${{ steps.version.outputs.version }}`,
              body: `The release process for ${{ steps.version.outputs.version }} failed. Please check the [workflow run](${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}) for details.`
            })