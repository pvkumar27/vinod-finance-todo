name: CI/CD Pipeline

on:
  push:
    branches: [ main, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm test -- --watchAll=false
        env:
          REACT_APP_SUPABASE_URL: https://test.supabase.co
          REACT_APP_SUPABASE_ANON_KEY: test-key
          REACT_APP_SITE_URL: http://localhost:3000
      
      # Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-
      
      # Install browsers only if cache miss
      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium
      
      # Start the app in background
      - name: Build app
        run: npm run build
        env:
          REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}
      
      - name: Start local server
        run: npx serve -s build &
        env:
          PORT: 3000
      
      # Wait for server to start
      - name: Wait for server
        run: |
          timeout=30
          while ! curl -s http://localhost:3000 > /dev/null; do
            if [ $timeout -le 0 ]; then
              echo "Server failed to start"
              exit 1
            fi
            echo "Waiting for server to start... ($timeout seconds left)"
            sleep 1
            timeout=$((timeout - 1))
          done
      
      # Run login tests with just chromium against local server
      - name: Run login tests
        run: npx playwright test tests/e2e/auth/login.spec.js --project=chromium-desktop
        env:
          BASE_URL: http://localhost:3000
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: tests/reports/
          retention-days: 30

  release:
    name: Release
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      # Set up git user for commits
      - name: Set up git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Determine version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Remove 'v' prefix for comparison
          CURRENT_VERSION_NUM=${CURRENT_VERSION#v}
          LATEST_TAG_NUM=${LATEST_TAG#v}
          
          # If current version is ahead of latest tag, use it
          if [ "$(printf '%s\n' "$LATEST_TAG_NUM" "$CURRENT_VERSION_NUM" | sort -V | tail -n1)" = "$CURRENT_VERSION_NUM" ]; then
            NEW_VERSION="v$CURRENT_VERSION_NUM"
          else
            # Increment patch version of latest tag
            MAJOR=$(echo $LATEST_TAG_NUM | cut -d. -f1)
            MINOR=$(echo $LATEST_TAG_NUM | cut -d. -f2)
            PATCH=$(echo $LATEST_TAG_NUM | cut -d. -f3)
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
          fi
          
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Run release script
        run: npm run release ${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify on success
        if: success()
        run: |
          echo "üéâ Release ${{ steps.version.outputs.version }} completed successfully!"
          echo "üåê Netlify will auto-deploy the new version"
      
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release failure: ${{ steps.version.outputs.version }}`,
              body: `The release process for ${{ steps.version.outputs.version }} failed. Please check the [workflow run](${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}) for details.`
            })