/**
 * Returns today's date in YYYY-MM-DD format using local time (Dallas, TX - Central Time)
 * @returns {string} Today's date in YYYY-MM-DD format
 */
export function getTodayDateString() {
  // Create date in local timezone
  const today = new Date();
  return today.toISOString().split('T')[0];
}

/**
 * Formats a date string in YYYY-MM-DD format to MM/DD format
 * Properly handles timezone differences
 * @param {string} dateStr - Date string in YYYY-MM-DD format or ISO format
 * @returns {string} Date string in MM/DD format
 */
export function formatDateString(dateStr) {
  if (!dateStr) return '';
  
  // Extract just the date part if it's an ISO string
  const datePart = dateStr.split('T')[0];
  
  // Create a date object using the date part
  // This will interpret the date in local timezone
  const date = new Date(datePart);
  
  // Format as MM/DD
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  
  return `${month}/${day}`;
}

/**
 * Parses a date string and returns a Date object
 * @param {string} dateStr - Date string in YYYY-MM-DD format
 * @returns {Date} Date object
 */
export function parseDate(dateStr) {
  if (!dateStr) return null;
  
  // Extract just the date part if it's an ISO string
  const datePart = dateStr.split('T')[0];
  
  // Create a date object using the date part
  return new Date(datePart);
}

/**
 * Converts a date string to a standardized ISO format for storage
 * @param {string} dateStr - Date string in YYYY-MM-DD format
 * @returns {string} Date string in ISO format
 */
export function toStorageFormat(dateStr) {
  if (!dateStr) return '';
  
  // Create a date object using the date part
  const date = new Date(dateStr);
  
  // Return ISO string
  return date.toISOString();
}