/* eslint-disable no-restricted-globals */
/* global clients */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
// eslint-disable-next-line -- Security hotspot undefined: Security reviewed - acceptable risk
const fileExtensionRegexp = /\/[^/?]+\.[^/]+$/;
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (fileExtensionRegexp.exec(url.pathname)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', event => {
  // Verify origin for security
  if (event.origin !== self.location.origin) return;

  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Push Notification Handlers for FinTask PWA
self.addEventListener('push', event => {
  // Push notification received

  let notificationData = {
    title: '💰 FinTask Reminder',
    body: 'Check your financial tasks',
    icon: '/icons/official-logo.png',
    badge: '/icons/official-logo.png',
    tag: 'fintask-notification',
    requireInteraction: false,
    actions: [
      {
        action: 'open',
        title: '📱 Open FinTask',
        icon: '/icons/official-logo.png',
      },
      {
        action: 'dismiss',
        title: '❌ Dismiss',
      },
    ],
    data: {
      url: '/',
      timestamp: Date.now(),
    },
  };

  // Parse push data if available
  if (event.data) {
    try {
      const pushData = event.data.json();
      notificationData = { ...notificationData, ...pushData };
    } catch (error) {
      // Error parsing push data
    }
  }

  event.waitUntil(self.registration.showNotification(notificationData.title, notificationData));
});

// Handle notification clicks
self.addEventListener('notificationclick', event => {
  // Notification clicked

  event.notification.close();

  if (event.action === 'dismiss') {
    return;
  }

  // Default action or 'open' action
  const urlToOpen = event.notification.data?.url || '/';

  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true }).then(clientList => {
      // Check if FinTask is already open
      for (const client of clientList) {
        if (client.url.includes(self.location.origin) && 'focus' in client) {
          return client.focus();
        }
      }

      // Open new window if not already open
      if (clients.openWindow) {
        return clients.openWindow(urlToOpen);
      }
    })
  );
});

// Handle notification close
self.addEventListener('notificationclose', event => {
  // Notification closed
  // Track notification dismissal analytics if needed
  // You can send this data to your analytics service
});

// Background sync for offline notifications
self.addEventListener('sync', event => {
  if (event.tag === 'fintask-reminder') {
    event.waitUntil(
      // Send any queued notifications when back online
      sendQueuedNotifications()
    );
  }
});

// Helper function to send queued notifications
async function sendQueuedNotifications() {
  try {
    // Check for any queued notifications in IndexedDB or localStorage
    // This is useful for offline scenarios
    const queuedNotifications = await getQueuedNotifications();

    for (const notification of queuedNotifications) {
      await self.registration.showNotification(notification.title, notification.options);
    }

    // Clear the queue after sending
    await clearNotificationQueue();
  } catch (error) {
    // Error sending queued notifications
  }
}

// Helper functions for notification queue management
async function getQueuedNotifications() {
  // Implement based on your storage preference
  return [];
}

async function clearNotificationQueue() {
  // Implement based on your storage preference
}

// Any other custom service worker logic can go here.
